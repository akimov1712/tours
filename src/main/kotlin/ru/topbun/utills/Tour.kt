package ru.topbun.utills

import ru.topbun.models.config.Config
import ru.topbun.models.meals.Meals
import ru.topbun.models.tours.HottourResponse
import ru.topbun.models.tours.TourDTO
import ru.topbun.models.tours.Tours
import ru.topbun.models.tours.Tours.date


fun List<List<TourDTO>>.getFilteredTours(): List<List<TourDTO>> =
    filter { group ->
        val delay = Config.getConfigFromResource().first { it.city?.name == group.first().departurename }.delayUniquePosts
        group.none {
            Tours.haveSuspension(it.tourid, delay)
        }
    }

fun HottourResponse.organizedTours(): List<List<TourDTO>> =
    hottours.tours.groupBy { it.countryname }.values.toList()

private fun List<TourDTO>.getNearTour(): TourDTO =
    minByOrNull { it.price } ?: throw NoSuchElementException("No tours available")

fun List<TourDTO>.getPreviewImage(): String = this.maxBy {
    it.hotelstars
}.also { println(it) }.hotelpicture

fun List<TourDTO>.buildMessageToTelegramPost(config: Config): String{
    val nearTour = this.getNearTour()
    val hotels = StringBuilder()
    val stocksBuilder = StringBuilder()
    val countryName = if (nearTour.countryname == "–†–æ—Å—Å–∏—è") nearTour.hotelregionname else nearTour.countryname
    val operators = this.map { it.operatorname }.distinct()
    val groupByFlydate = this.groupBy { it.flydate }.map { it.value }.sortedBy { it.first().flydate }
    groupByFlydate.forEachIndexed { index, tour ->
        val flydateBuilder = StringBuilder()

        val date = tour.firstOrNull()?.flydate?.parseDate() ?: return@forEachIndexed

        val minNight = tour.minBy { it.nights }.nights + 1
        val maxNight = tour.maxBy { it.nights }.nights + 1
        val durationDays = if (minNight == maxNight) minNight.toString() else "$minNight - $maxNight"

        flydateBuilder.append("\uD83D\uDCC5 <b>${date.formatToDayWithMonth()} –Ω–∞ $durationDays –¥–Ω–µ–π</b>\n")
        tour.forEach {
            val msg = "\uD83C\uDFE8 ${it.hotelname} (${it.hotelstars} ‚≠ê) - ".capitalizeWords()
            val price = "<a href=\"${config.domain}/podbor-tura#tvtourid=${it.tourid}\">${formatPrice(it.price)} –†—É–±</a>\n"
            flydateBuilder.append(msg + price)
        }
        if (groupByFlydate.size - 1 != index){
            flydateBuilder.append("\n")
        }
        hotels.append(flydateBuilder)
    }
    config.stocks.firstOrNull { it.operator.name == operators.first() }?.let { stocksBuilder.append("‚ù§\uFE0F <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è ‚Äì ${it.stock}</b>") }
    return """
üî• <b>$countryName –∏–∑ ${nearTour.departurenamefrom}</b> ‚úàÔ∏è

üçΩÔ∏è <b>–ü–∏—Ç–∞–Ω–∏–µ:</b> ${Meals.selectMeal(nearTour.meal).russian}

<b>–û—Ç–µ–ª–∏ –∏ —Ü–µ–Ω—ã:</b>

$hotels
$stocksBuilder

‚ö°Ô∏è–¶–µ–Ω–∞ –∑–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ 2-–º–µ—Å—Ç–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏.

–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: @sanitravell
        """.trimIndent()
}

fun List<TourDTO>.buildMessageToVkPost(config: Config): String{
    val nearTour = this.getNearTour()
    val hotels = StringBuilder()
    val stocksBuilder = StringBuilder()
    val operators = this.map { it.operatorname }.distinct()
    val countryName = if (nearTour.countryname == "–†–æ—Å—Å–∏—è") nearTour.hotelregionname else nearTour.countryname
    val groupByFlydate = this.groupBy { it.flydate }.map { it.value }.sortedBy { it.first().flydate }
    groupByFlydate.forEachIndexed { index, tour ->
        val flydateBuilder = StringBuilder()

        val date = tour.firstOrNull()?.flydate?.parseDate() ?: return@forEachIndexed

        val minNight = tour.minBy { it.nights }.nights + 1
        val maxNight = tour.maxBy { it.nights }.nights + 1
        val durationDays = if (minNight == maxNight) minNight.toString() else "$minNight - $maxNight"

        flydateBuilder.append("\uD83D\uDCC5 ${date.formatToDayWithMonth()} –Ω–∞ $durationDays –¥–Ω–µ–π\n")
        tour.forEach {
            val msg = "\uD83C\uDFE8 ${it.hotelname} (${it.hotelstars} ‚≠ê) - ".capitalizeWords()
            val price = "${formatPrice(it.price)} –†—É–±\n"
            flydateBuilder.append(msg + price)
        }
        if (groupByFlydate.size - 1 != index){
            flydateBuilder.append("\n")
        }
        hotels.append(flydateBuilder)
    }
    config.stocks.firstOrNull { it.operator.name == operators.first() }?.let { stocksBuilder.append("‚ù§\uFE0F –î–µ–π—Å—Ç–≤—É–µ—Ç –∞–∫—Ü–∏—è:${it.stock}") }
    return """
üî• $countryName –∏–∑ ${nearTour.departurenamefrom} ‚úàÔ∏è

üçΩÔ∏è –ü–∏—Ç–∞–Ω–∏–µ: ${Meals.selectMeal(nearTour.meal).russian}

–û—Ç–µ–ª–∏ –∏ —Ü–µ–Ω—ã:

$hotels
$stocksBuilder

‚ö°Ô∏è–¶–µ–Ω–∞ –∑–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ 2-–º–µ—Å—Ç–Ω–æ–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏.
        """.trimIndent()
}